}else{
even<-even+i # even:홀수
}print(odd)
print(even)
}
sum_function<-function(x){
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
print(odd)
print(even)
}
}
sum_function(10)
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
print(odd)
print(even)
}
}
sum_function(10)
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
print(odd)
print(even)
}
}
sum_function(10)
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
} print(odd)
print(even)
}
sum_function(10)
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
}print(odd)
print(even)
}
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
}
print(odd)
print(even)
}
sum_function(10)
#1. 정수를 입력하면 홀수의 합, 짝수의 합을 계산하는 함수를 만들어라.
sum_function<-function(x){
odd=0
even=0
for (i in 1:x){
if (i%%2==0){
odd<-odd+i
}else{
even<-even+i
}
}
print(odd)
print(even)
}
sum_function(10)
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0)
print('Buzz')
}else{
print(i)
}
}
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0)
print('Buzz')
}else{
print(i)
}
}
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0)
print('Buzz')
}else{
print(i)
}
}
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0)
print('Buzz')
}else{
print(i)
}
}
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0)
print('Buzz')
}else{
print(i)
}
}
#2. 1부터 100까지의 정수를 프린트하는 프로그램을 작성하는데, 3의 배수이면 'Fizz',
#   5의 배수이면 'Buzz', 15의 배수이면 'FizzBuzz'를 프린트 하도록 하자.
func2<-function(){
for (i in 1:100){
if (i%%3==0 & i%%5==0){
print('FizzBuzz')
}else if (i%%3==0){
print('Fizz')
}else if (i%%5==0){
print('Buzz')
}else{
print(i)
}
}
}
func2
func2(i)
func2()
#4. 123의 자릿수의 합은 1+2+3=6 이다. 임의의 양의 정수가 들어왔을 때, 각 자릿수의 합을
#   구하는 함수를 만드시오.
func4<-function(x){
x_=str(x)
sum=0
for (i in x_){
sum=sum+i
}return(sum)
}
#4. 123의 자릿수의 합은 1+2+3=6 이다. 임의의 양의 정수가 들어왔을 때, 각 자릿수의 합을
#   구하는 함수를 만드시오.
func4<-function(x){
x_=str(x)
sum=0
for (i in x_){
sum=sum+int(i)
}return(sum)
}
#4. 123의 자릿수의 합은 1+2+3=6 이다. 임의의 양의 정수가 들어왔을 때, 각 자릿수의 합을
#   구하는 함수를 만드시오.
func5<-function(x){
for (i in range(4)){
digit=number%/%(10^(3-i))
number=number%%(10^(3-i))
sum=sum+digit
}print(digit, number)
}
#3. 어떤 양의 정수가 입력으로 들어왔을 때, 이 수를 X라고 하자.
#   X의 자릿수를 계산하는 함수를 만드시오.
func3 = function(x){
while((x/i) >=1){
i = i * 10
}
i = i / 10
print(i)
func3(20)
func3 = function(x){
while((x/i) >=1){
i = i * 10
}
i = i / 10
print(i)
func3(20)
url<-http://bd.kma.go.kr/kma2018/svc/rauto_doLogin_in.do
matrix(1:9,3,3)
m<-matrix(1:9,3,3)
matrix(1:9%%2==0,3,3)
m<-matrix(1:9%%2==0,3,3)
diag(m)
matrix(c(2,3,4,1,5,6,8,9,4,11,30,20))
matrix(2,3,4,1,5,6,8,9,4,11,30,20)
matrix(c(2,3,4,1,5,6,8,9,4,11,30,20),3,4)
a<-matrix(c(2,3,4,1,5,6,8,9,4,11,30,20),3,4)
a[,4]
t<-c(2,3,4,1,5,6,8,9,4,11,30,20)
t[2]
t[2,7]
t[c(2,7,12)]
a[,4,nrow=1]
a[,4,nrow=1]
matrix(a[,4,nrow=1])
matrix(a[,4])
matrix(a[,4],nrow=1)
matrix(1:9,3,3)
r<-matrix(1:9,3,3)
diag(r)
c(6,15,24)+diag(r)
a<-c(1,6,8,6,8,7)
matrix(a)
matrix(a,nrow=3)
korea_hnb <- dbGetQuery(conn, "select * from korea_hnb")
# GS25 데이터
korea_cvs <- dbGetQuery(conn, "select * from korea_cvs")
# 기상데이터
bigcon_weather <- dbGetQuery(conn, "select * from bigcon_weather")
# 소셜 언급량 - 맛집
social_br <- dbGetQuery(conn, "select * from social_br")
# 소셜 언급량 - 데이트
social_date <- dbGetQuery(conn, "select * from social_date")
# 소셜 언급량 - 건강
social_health <- dbGetQuery(conn, "select * from social_health")
# 소셜 언급량 - 취미
social_hobby <- dbGetQuery(conn, "select * from social_hobby")
# 소셜 언급량 - 미세먼지
social_pm <- dbGetQuery(conn, "select * from social_pm")
if (!require(dplyr)) {install.packages(('dplyr'))} ; library(dplyr)
# 랄라블라 데이터
korea_hnb <- dbGetQuery(conn, "select * from korea_hnb")
# GS25 데이터
korea_cvs <- dbGetQuery(conn, "select * from korea_cvs")
# 기상데이터
bigcon_weather <- dbGetQuery(conn, "select * from bigcon_weather")
# 소셜 언급량 - 맛집
social_br <- dbGetQuery(conn, "select * from social_br")
# 소셜 언급량 - 데이트
social_date <- dbGetQuery(conn, "select * from social_date")
# 소셜 언급량 - 건강
social_health <- dbGetQuery(conn, "select * from social_health")
# 소셜 언급량 - 취미
social_hobby <- dbGetQuery(conn, "select * from social_hobby")
# 소셜 언급량 - 미세먼지
social_pm <- dbGetQuery(conn, "select * from social_pm")
load("~/.RData")
bigcon_weather
read.csv("bigcon_weather.csv")
install.packages("KoNLP")
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
library(KoNLP)
useSejongDic()
SimplePos22(sentence)
useSejongDic()
SimplePos22(sentence)
sentence <- "어머니와 아버지가 장을 보러 가신다. 양파 한개와 생선을 사오시며 행복해 하신다"
SimplePos22(sentence)
noun <- extractNoun(sentence)
noun
Simplepos09(sentence)
setwd("C:/Users/yejin/Desktop/빅데이터교육/day1")
install.packages("readxl")
library(readxl)
# 저장된 엑셀데이터 불러오기
data <- read_excel("sample.xlsx")
head(data)
#파이프 함수를 이용하여 변인 선택을 위한 dplyr 패키지 실행
install.packages("dplyr")
library(dplyr)
# 마지막 2개 변수 제외 모두
tempdata <- data %>% select(1:17)
# 변수명을 바꾸기
tempdata <- tempdata %>%
rename(
newid = `뉴스 식별자`,
day=일자,
comp=언론사,
author=기고자,
title=제목,
cate_all_1=`통합 분류1`,
cate_all_2=`통합 분류2`,
cate_all_3=`통합 분류3`,
cate_event_1=`사건/사고 분류1`,
cate_event_2=`사건/사고 분류2`,
cate_event_3=`사건/사고 분류3`,
agent=인물,
location=위치,
organ=기관,
keyword=키워드,
feature=특성추출,
contents=본문
)
tempdata
library(KoNLP)
##tempdata에서 콘텐츠(본문) 부분만 따오기
contents <- tempdata$contents
head(contents)
## 데이터에서 명사만 추출하고자 함. 시스템 디폴트 사전을 사용해도 되나 좀더 정확한 분석을 위해
##국립국어원에서 배포하는 사전과
useSejongDic()
##정보화진흥원에서 배포하는 사전을 추가로 설치
useNIADic()
#때로는 이 사전에 추가되지 않은 신조어를 처리해야 할 때가 있습니다.
#이 때는 mergeUserDic이라는 명령어를 써서 추가합니다.
mergeUserDic(data.frame(c("개깜놀","핵존맛","JMT"), c("ncn")))
#그럼 일단 명사를 추출해 봅시다
txt <- extractNoun (contents)
head(txt)
tempdata %>% head()
tempdata$contents
##불용어처리
#제어문자 삭제
txt_data <- gsub("[[:cntrl:]]","",txt)
txt_data <- gsub("[[:punct:]]","",txt_data)
#숫자 삭제
txt_data <- gsub("[[:digit:]]","",txt_data)
#소문자 삭제
txt_data <- gsub("[[:lower:]]","",txt_data)
#대문자 삭제
txt_data <- gsub("[[:upper:]]","",txt_data)
#특수문자 삭제
txt_data <- gsub("[^[:print:]]","",txt_data)
txt_data <- gsub("▲","",txt_data)
txt_data <- gsub("◎","",txt_data)
#나중에 실행하세요
head(txt_data)
#텍스트마이닝 패키지 설치
install.packages("tm")
library(tm)
docs <- Corpus(VectorSource(txt_data))
WordList <- sapply(docs, extractNoun, USE.NAMES=FALSE)
vectordata <- unlist(WordList)
View(WordList)
View(docs)
#한글자는 제외합시다
vectordata <- Filter(function(x){nchar(x)>1}, vectordata)
View(preview)
#추가로불용어처리할것이있는지preview로확인
preview<- sort(table(vectordata), decreasing=TRUE,100)
View(preview)
View(preview)
#빈도추출
wordcount <- table(vectordata)
wordcount
wordcount <- table(vectordata)
write.csv(wordcount,file="freq.csv")
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
#wordcloud
wordcloud(names(wordcount),
freq = wordcount, #빈도량
scale = c(3,0.5), #글자크기
rot.per = 0.25, #회전단어 빈도
min.freq = 10, #포함되는 최소빈도
random.order = F,
random.color = F,
colors = brewer.pal(8, "Set2"))
install.packages("wordcloud2")
library(wordcloud2)
install.packages('devtools')
devtools::install_github("lchiffon/wordcloud2")
install.packages("devtools")
wordcloud2(wordcount)
install.packages("wordcloud2")
library(wordcloud2)
install.packages('devtools')
devtools::install_github("lchiffon/wordcloud2")
devtools::install_github("lchiffon/wordcloud2")
install.packages("wordcloud2")
install.packages("wordcloud2")
library(wordcloud2)
install.packages("digest")
library(digest)
library(wordcloud2)
install.packages('devtools')
install.packages("devtools")
devtools::install_github("lchiffon/wordcloud2")
wordcloud2(wordcount, shape = "star")
wordcloud2(wordcount)
wordcloud2(wordcount)
library(wordcloud2)
wordcloud2(wordcount)
wordcloud2(wordcount, shape = "star")
letterCloud(wordcount, "A")
letterCloud(wordcount, "A")
figPath = system.file("heart1.png", package = "wordcloud2")
wordcloud2(wordcount, figPath = "heart1.png")
wordcloud2(wordcount, figPath = "heart1.png")
letterCloud(wordcount, "A")
figPath = system.file("heart1.png", package = "wordcloud2")
wordcloud2(wordcount, figPath = "heart1.png")
#잠깐 바그래프 형식으로 그리는 테그도 소개합니다. 알아보기 쉽게 하기 위해 최다빈출어 상위 NN개로 추출하고 이를 토대로 그리게 되는데요, 상세한 부분은 다음에 소개하겠습니다.
barplot(wordcount, las = 2, names.arg = wordcount,
col ="lightblue", main ="최다빈출어",
ylab = "갯수")
##tempdata에서 콘텐츠(본문) 부분만 따오기
contents <- data$'본문'
head(contents)
#영문표현삭제
newcontents <- str_replace_all(contents, "[[:lower:]]", "")
install.packages("stringr")
library(stringr)
#영문표현삭제
newcontents <- str_replace_all(contents, "[[:lower:]]", "")
#제어문자 삭제
newcontents <- str_replace_all(newcontents, "[[:cntrl:]]", "")
#특수기호 삭제
newcontents <- str_replace_all(newcontents, "[[:punct:]]", "")
#숫자 = 삭제
newcontents <- str_replace_all(newcontents, "[[:digit:]]", "")
#괄호삭제
newcontents <- str_replace_all(newcontents, "\\(", "")
newcontents <- str_replace_all(newcontents, "\\)", "")
#따옴표 삭제
newcontents <- str_replace_all(newcontents, "'", "")
newcontents <- str_replace_all(newcontents, "'", "")
#특수기호 삭제
newcontents <- str_replace_all(newcontents, "[^[:print:]]", "")
#명사 추출
noun <- extractNoun(newcontents)
install.packages(tm)
library(tm)
#코퍼스에서 명사를 한번 더 추출하기 위해 코퍼스 형태로 변환합니다.
myCorpus <- Corpus(VectorSource(noun))
library(KoNLP)
library(readxl)
library(tm)
#코퍼스에서 명사를 한번 더 추출하기 위해 코퍼스 형태로 변환합니다.
myCorpus <- Corpus(VectorSource(noun))
#명사 추출
noun <- extractNoun(newcontents)
#코퍼스에서 명사를 한번 더 추출하기 위해 코퍼스 형태로 변환합니다.
myCorpus <- Corpus(VectorSource(noun))
#코퍼스(말뭉치)에서 줄 단위로 검색되어 추출된 명사는 라인으로 변환됩니다. Environment창에서 확인하세요
myCorpus <- sapply(myCorpus, extractNoun, USE.NAMES=FALSE)
myCorpus <- Corpus(VectorSource(myCorpus))
myCorpus <- tm_map(myCorpus, removePunctuation)
myCorpus <- tm_map(myCorpus, removeNumbers)
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, stripWhitespace)
WordList <- sapply(myCorpus, extractNoun, USE.NAMES=FALSE)
vectordata <- unlist(WordList)
#한글자는 제외합시다
vectordata <- Filter(function(x){nchar(x)>1}, vectordata)
preview<- sort(table(vectordata), decreasing=TRUE,100)
setwd("C:/Users/yejin/Desktop")
setwd("C:/Users/yejin/Desktop/빅데이터교육/day1")
library(KoNLP)
library(stringr)
## 사전 선택 택1
useSejongDic()
##데이터 가져오기.
data <- readLines("kim.txt", encoding = "UTF-8")
View(data)
head(data)
